#!/bin/bash
# An installation script for CouchDB, for Ubuntu 16.04 Xenial 64-bit.
# Based on information from:
#   http://docs.couchdb.org/en/2.0.0/install/unix.html
#   http://docs.couchdb.org/en/2.0.0/install/
#   https://www.jamescoyle.net/how-to/2527-add-systemd-startup-script-for-couchdb


USER=$(whoami)
if [ $USER != "root" ]; then
   printf "\nYou must run this script as root.\n\n"
   exit
fi

printf "\n\n\nINSTALLING COUCHDB 2.x\n\n\n"

# printf "\n=====================================================\n"
# echo Upgrading the Package Manager:
# printf "=====================================================\n"

# apt-get upgrade -y

# printf "\n=====================================================\n"
# echo Updating Packages:
# printf "=====================================================\n"

# apt-get update -y

# printf "\n=====================================================\n"
# echo Installing Dependencies:
# printf "=====================================================\n"

# apt-get --no-install-recommends -y install \
#     build-essential pkg-config erlang \
#     libicu-dev libmozjs185-dev libcurl4-openssl-dev

# printf "\n=====================================================\n"
# echo Downloading CouchDB:
# printf "=====================================================\n"

# DOWNLOAD_URL=http://apache.javapipe.com/couchdb/source/2.0.0/apache-couchdb-2.0.0.tar.gz
# DOWNLOAD_DIR=/tmp/couchdb/
# ARCHIVE_DIRNAME=apache-couchdb-2.0.0
# ARCHIVE_FILENAME=$ARCHIVE_DIRNAME.tar.gz


# rm -rf $DOWNLOAD_DIR
# wget --directory-prefix=$DOWNLOAD_DIR $DOWNLOAD_URL

# printf "\n=====================================================\n"
# echo Decompressing Archive:
# printf "=====================================================\n"

# tar -xzvf $DOWNLOAD_DIR$ARCHIVE_FILENAME -C $DOWNLOAD_DIR


# printf "\n=====================================================\n"
# echo Running Configuration:
# printf "=====================================================\n"

# cd $DOWNLOAD_DIR$ARCHIVE_DIRNAME
# sh configure

# printf "\n=====================================================\n"
# echo Making CouchDB:
# printf "=====================================================\n"

# make release

# printf "\n=====================================================\n"
# echo Copying Files:
# printf "=====================================================\n"

TARGET_DIR=/home/couchdb

# rm -rf $TARGET_DIR
# cp -r $DOWNLOAD_DIR$ARCHIVE_DIRNAME/rel/couchdb $TARGET_DIR/
# echo 'Done.'

# printf "\n=====================================================\n"
# echo Creating CouchDB System User:
# printf "=====================================================\n"

# adduser --system \
#         --no-create-home \
#         --shell /bin/bash \
#         --group --gecos \
#         "CouchDB Administrator" couchdb

# printf "\n=====================================================\n"
# echo Setting Permissions:
# printf "=====================================================\n"

# chown -R couchdb:couchdb $TARGET_DIR
# find $TARGET_DIR -type d -exec chmod 0770 {} \;
# chmod 0644 $TARGET_DIR/etc/*
# echo 'Done.'


printf "\n=====================================================\n"
echo Cleaning Up:
printf "=====================================================\n"

rm -rf $DOWNLOAD_DIR
echo 'Done.'

printf "\n=====================================================\n"
echo Setting Up and Starting CouchDB service:
printf "=====================================================\n"

cat <<EOT > /etc/systemd/system/couchdb.service
[Unit]
Description=Couchdb service
After=network.target

[Service]
Type=simple
User=couchdb
ExecStart=/$TARGET_DIR/bin/couchdb -o /dev/stdout -e /dev/stderr
Restart=always
EOT

systemctl  daemon-reload
systemctl  start couchdb.service
systemctl  enable couchdb.service

echo 'Done.'

printf "\n=====================================================\n"
echo Waiting for CouchDB Service:
printf "=====================================================\n"

COUNTER=10

while [[ $(eval "service couchdb status") != *'active (running)'* &&  $COUNTER -gt 1 ]]; do
    ((COUNTER--))
    echo -ne "\rWaiting, $COUNTER seconds left.                      "
    sleep 1
done

if [ $COUNTER == 1 ]; then
    echo -ne "\rCouchDB service not running.\nAutomatic CouchDB setup cannot continue.\n"
    echo -ne "Try starting CouchDB manually using: \"sudo -i -u couchdb /home/couchdb/bin/couchdb\", to run CouchDB as the couchdb user.\n\n"
    exit
else
    echo -ne "\rCouchDB service is running.                                           \n"
fi

DB_ADDRESS="http://localhost:5984"
DB_CHECK_STR='"couchdb":"Welcome"'
echo -ne "Querying CouchDB server on $DB_ADDRESS:"

sleep 0

DB_RESPONSE=$(curl -s -X GET $DB_ADDRESS)

if [[ "$DB_RESPONSE" == *$DB_CHECK_STR* ]]; then
    echo -ne " OK\n"
    echo -ne "CouchDB server is online.\n"
else
    echo -ne " FAIL\n"
    echo -ne " CouchDB server is offline.\n"
    echo -ne "Automatic CouchDB setup cannot continue.\n"
    echo -ne "Try starting CouchDB manually using: \"sudo -i -u couchdb /home/couchdb/bin/couchdb\", to run CouchDB as the couchdb user.\n\n"
    exit
fi

printf "\n=====================================================\n"
echo Performing Single Node Setup:
printf "=====================================================\n"

DB_CHECK_STR_OK='"ok":true'
DB_CHECK_STR_EXISTS='"error":"file_exists"'

RESULT=$(curl -s -X PUT $DB_ADDRESS/_users)
if [[ "$RESULT" == *$DB_CHECK_STR_OK* || "$RESULT" == *$DB_CHECK_STR_EXISTS* ]]; then
    SUCCESS=1
    echo 'Created _users database.'
else
    SUCCESS=0
    echo 'Failed to create _users database.'
fi

RESULT=$(curl -s -X PUT $DB_ADDRESS/_replicator)
if [[ "$RESULT" == *$DB_CHECK_STR_OK* || "$RESULT" == *$DB_CHECK_STR_EXISTS* ]]; then
    SUCCESS=1
    echo Created _replicator database.
else
    SUCCESS=0
    echo Failed to create _replicator database.
fi

RESULT=$(curl -s -X PUT $DB_ADDRESS/_global_changes)
if [[ "$RESULT" == *$DB_CHECK_STR_OK* || "$RESULT" == *$DB_CHECK_STR_EXISTS* ]]; then
    SUCCESS=1
    echo Created _global_changes database.
else
    SUCCESS=0
    echo Failed to create _global_changes database.
fi

if [ $SUCCESS == 0 ]; then
    echo -ne "Single node setup failed. You'll need to do it manually.\n\n"
    exit
fi

printf "\n=====================================================\n"
echo Final Instructions:
printf "=====================================================\n"
echo Use \"sudo -i -u couchdb /home/couchdb/bin/couchdb\" to run CouchDB as the couchdb user.


printf "\n\n\nCOUCHDB 2.x INSTALLATION FINISHED.\n\n\n"